// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Wallet.Core.Infrastructure.Database;

#nullable disable

namespace Wallet.Api.Migrations
{
    [DbContext(typeof(WalletDbContext))]
    [Migration("20250208224338_FixNumericColumn")]
    partial class FixNumericColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Wallet.Core.Domain.Entities.Transfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("NUMERIC(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ReceiverWalletId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderWalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverWalletId");

                    b.HasIndex("SenderWalletId");

                    b.ToTable("Transactions", t =>
                        {
                            t.HasCheckConstraint("CK_Transactions_Amount", "\"Amount\" >= 0");
                        });
                });

            modelBuilder.Entity("Wallet.Core.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Wallet.Core.Domain.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("NUMERIC(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallets", t =>
                        {
                            t.HasCheckConstraint("CK_Wallet_Balance", "\"Balance\" >= 0");
                        });
                });

            modelBuilder.Entity("Wallet.Core.Domain.Entities.Transfer", b =>
                {
                    b.HasOne("Wallet.Core.Domain.Entities.Wallet", "ReceiverWallet")
                        .WithMany("ReceivedTransfers")
                        .HasForeignKey("ReceiverWalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wallet.Core.Domain.Entities.Wallet", "SenderWallet")
                        .WithMany("SentTransfers")
                        .HasForeignKey("SenderWalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReceiverWallet");

                    b.Navigation("SenderWallet");
                });

            modelBuilder.Entity("Wallet.Core.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("Wallet.Core.Domain.Entities.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("Wallet.Core.Domain.Entities.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wallet.Core.Domain.Entities.User", b =>
                {
                    b.Navigation("Wallet")
                        .IsRequired();
                });

            modelBuilder.Entity("Wallet.Core.Domain.Entities.Wallet", b =>
                {
                    b.Navigation("ReceivedTransfers");

                    b.Navigation("SentTransfers");
                });
#pragma warning restore 612, 618
        }
    }
}
